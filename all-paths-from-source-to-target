/* Backtracking Solution */

class Solution {
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>> allpaths;
        vector<int>path;
        path.push_back(0);
        bt(graph,0,path,allpaths);
        return allpaths;

    }
private:
    void bt(vector<vector<int>> graph,int vertex,vector<int>& path,vector<vector<int>>& allpaths){
        if(vertex==graph.size()-1){
            allpaths.push_back(path);
        }
        else{
            for(int neighbor: graph[vertex]){
                path.push_back(neighbor);
                bt(graph,neighbor,path,allpaths);
                path.pop_back();
            }
        }
    }
};


/* DP Solution  */

class Solution {
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph){
        return  f1(graph,0);

    }
    vector<vector<int>> f1(vector<vector<int>> graph,int vertex){
        if(vertex == graph.size()-1){
            return {{vertex}};
        }
        else{
            vector<vector<int>> allpaths;

            for(int neighbor:graph[vertex]){
                vector<vector<int>>paths=f1(graph,neighbor);

                for(vector<int>& path:paths){
                    path.insert(path.begin(),vertex);
                    allpaths.push_back(path);
                }
            }
     return allpaths;
           
        }
     
    }
    };


