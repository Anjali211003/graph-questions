class Solution {
public:
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        vector<int>visited(n,0);
        
        vector<vector<int>>adj(n, vector<int>());
        for(auto i:edges)
        {       int u = i[0];
                int v = i[1];
                adj[u].push_back(v);
                adj[v].push_back(u);
            
        }
        int ans =0;
        for (int i=0; i<n; i++) {
            if (!(visited[i])) {
                int v = 0, ce = 0;
                dfs(i, visited,ce,v,adj);
                
                if (ce == v * (v-1)) 
                ans++;      
            }
        }
        
        return ans;

    }
    void dfs(int& i,vector<int>&visited,int& ce,int& v,vector<vector<int>>& adj)
    {
     visited[i]=1;
      v++, ce += adj[i].size();

        for (auto nbr : adj[i]){
            if(!(visited[nbr])) 
            dfs(nbr, visited, ce,v,adj);
        }  
    }
};
